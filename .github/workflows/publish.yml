# How to use this workflow:
# 1. Copy this file to your repo's .github/workflows/ directory.
#    DO NOT symlink. Github Actions does not support symlinks.
# 2. Update the name at the top of the file.
# 3. Update the PACKAGE_PATH environment variable below.
#    The PACKAGE_PATH should point to the directory where your package.json file is located,
#    relative to your repo's root.
# 4. Update the PACKAGE_TAG_PREFIX environment variable below.
#    The PACKAGE_TAG_PREFIX should match the prefix used in your package's version tags.
# 5. Configure environment variables for authentication tokens in your repository settings,
#    and reference them in the relevant steps below.

name: Temporal-Agent-TS - publish

# NOTE: env context is only available in the jobs context below.
env:
  PACKAGE_PATH: '.'

  # When you update the PACKAGE_TAG_PREFIX, you must also update
  # the on.push.tags and concurrency.group values below.
  PACKAGE_TAG_PREFIX: 'temporal-agent-ts'

  # Package registry to publish to
  # Some frequently used registries:
  # npmjs: https://registry.npmjs.org/
  # GitHub Packages: https://npm.pkg.github.com/
  # IMPORTANT NOTE: If this repository requires authentication to access
  # the registry, you must configure authentication in the NPMRC_CONTENTS below,
  # and uncomment the relevant environment variables in the steps below.
  #  Otherwise, the publish step will fail.
  PACKAGE_REGISTRY: 'https://npm.pkg.github.com'

on:
  push:
    tags:
      - 'temporal-agent-ts/v*'

concurrency:
  group: 'packages-temporal-agent-ts-publish-${{ github.ref }}'
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full repository
        if: ${{ env.PACKAGE_PATH == '.' }}
        uses: actions/checkout@v4

      - name: Sparse checkout only the package path
        if: ${{ env.PACKAGE_PATH != '.' }}
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.PACKAGE_PATH }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.PACKAGE_PATH }}/.nvmrc
          cache: 'npm'
          cache-dependency-path: ${{ env.PACKAGE_PATH }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.PACKAGE_PATH }}
        # Skip post-install scripts here with --ignore-scripts, as a malicious
        # script could steal auth tokens.
        run: npm ci --ignore-scripts
        # UPDATE THE ENVIRONMENT VARIABLES BELOW AS NEEDED *********************
        # If you are using npm repositories that require authentication,
        # uncomment the following env block and provide any needed
        # authentication token environment variables.
        # NOTE: We don't use GITHUB_ENV to pass these variables to later steps
        # because we don't want to risk leaking them to other steps.
        # env:
        #   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   PRIVATE_TOKEN_FOR_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_ANOTHER_SCOPE }}
        #   PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE }}

      - name: Run tests
        working-directory: ${{ env.PACKAGE_PATH }}
        run: npm run ci:check

      - name: Verify version matches tag
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          PKG_VERSION=$(jq -r '.version' package.json)
          TAG_VERSION=${GITHUB_REF#refs/tags/${{ env.PACKAGE_TAG_PREFIX }}/v}
          if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "package.json version ($PKG_VERSION) != tag version ($TAG_VERSION)" >&2
            exit 1
          fi

      - name: Skip if version already published
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          PKG_NAME=$(jq -r '.name' package.json)
          PKG_VERSION=$(jq -r '.version' package.json)
          npm view "$PKG_NAME@$PKG_VERSION" version --registry=${{ env.PACKAGE_REGISTRY }}
          echo $?
          if npm view "$PKG_NAME@$PKG_VERSION" version --registry=${{ env.PACKAGE_REGISTRY }} > /dev/null 2>&1; then
            echo "Version $PKG_NAME@$PKG_VERSION already exists. Skipping publish."
            echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
          fi
        # UPDATE THE ENVIRONMENT VARIABLES BELOW AS NEEDED *********************
        # If you are using npm repositories that require authentication,
        # uncomment the following env block and provide any needed
        # authentication token environment variables.
        # NOTE: We don't use GITHUB_ENV to pass these variables to later steps
        # because we don't want to risk leaking them to other steps.
        # env:
        #   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   PRIVATE_TOKEN_FOR_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_ANOTHER_SCOPE }}
        #   PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE }}

      - name: Publish
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          echo ${SKIP_PUBLISH}
          if [ "${SKIP_PUBLISH}" = "true" ]; then
            echo "Publish step skipped.";
            exit 0;
          fi
          npm run ship
        # UPDATE THE ENVIRONMENT VARIABLES BELOW AS NEEDED *********************
        # If you are using npm repositories that require authentication,
        # uncomment the following env block and provide any needed
        # authentication token environment variables.
        # NOTE: We don't use GITHUB_ENV to pass these variables to later steps
        # because we don't want to risk leaking them to other steps.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        #   PRIVATE_TOKEN_FOR_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_ANOTHER_SCOPE }}
        #   PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE: ${{ secrets.PRIVATE_TOKEN_FOR_YET_ANOTHER_SCOPE }}
